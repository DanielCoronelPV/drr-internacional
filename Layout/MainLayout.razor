@using DRR_PRESENTATION.Models
@using DRR_PRESENTATION.Services

@inherits LayoutComponentBase
@inject EmpresaService EmpresaService
@inject TranslationService Translator
@inject HttpClient Http
@inject IJSRuntime JS

<div>
    <main role="main">
        @if (!isLoaded)
        {
            <div class="loader-container">
                <div class="spinner"></div>
                <p class="loader-text">Cargando contenido...</p>
            </div>
        }
        else
        {
            <Header EmpresaData="@_empresa" />

            <div>
                <main role="main">
                    @Body
                </main>
            </div>

            <section id="footer">
                <Footer EmpresaData="@_empresa" />
            </section>

            <Shared EmpresaData="@_empresa" />
        }
    </main>
</div>

@code {
    private Empresa? _empresa;
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _empresa = await EmpresaService.ObtenerEmpresaAsync();
            if (_empresa == null)
            {
                await JS.InvokeVoidAsync("console.log", "Datos de la empresa no encontrados.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error al cargar los datos de la empresa:", ex.Message);
        }

        // Cargar idioma por defecto (español) antes de renderizar
        await Translator.InitializeAsync(Http, JS);

        isLoaded = true;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Translator.OnLanguageChanged += OnLanguageChangedHandler;
    }

    private void OnLanguageChangedHandler()
    {
        InvokeAsync(StateHasChanged); // fuerza el re-render al cambiar idioma
    }

    public void Dispose()
    {
        Translator.OnLanguageChanged -= OnLanguageChangedHandler;
    }
}
