@inject TranslationService Translator

<section class="services-section">
    <div class="services-container">
        <div class="services-header">
            <h2>@((MarkupString)Translator.Translate("registroTitle"))</h2>
            <div class="divider"></div>
            <p>
                @((MarkupString)Translator.Translate("registroSubtitle"))
            </p>
        </div>

        <div class="additional-services">
            @foreach (var service in AdditionalServices)
            {
                <div class="service-card small" data-aos="@service.AosAnimation" data-aos-delay="@service.AosDelay">
                    <div class="icon-title-card">
                        <div class="icon-wrapper small">
                            <i class="@service.IconClass"></i>
                        </div>
                        <h4>@((MarkupString)Translator.Translate(service.Title))</h4>
                    </div>
                    <ul class="service-description-list">
                        @foreach (var item in service.DescriptionItems)
                        {
                            <li>@((MarkupString)Translator.Translate(item))</li>
                        }
                    </ul>
                </div>
            }
        </div>

        <!-- CTA -->
        <div class="cta">
            <div class="cta-box">
                <h3>@((MarkupString)Translator.Translate("ctaTitle"))</h3>
                <p>
                    @((MarkupString)Translator.Translate("ctaSubtitle"))
                </p>
                <div class="cta-buttons" data-aos="fade-up" data-aos-delay="100">
                    <button onclick="scrollToSection('contactanos')" class="btn-outline">@((MarkupString)Translator.Translate("ctaButton"))</button>
                </div>
            </div>
        </div>

    </div>
</section>

@code {
    public class Service
    {
        public string IconClass { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public List<string> DescriptionItems { get; set; } = new();
        public string AosAnimation { get; set; } = string.Empty;
        public int AosDelay { get; set; } = 0;
    }

    private List<Service> AdditionalServices = new()
    {
        new Service
        {
            IconClass = "fa-regular fa-building",
            Title = "informacionEmpresarial",
            DescriptionItems = new()
            {
                "infoDescripcion1",
                "infoDescripcion2"
            },
            AosAnimation = "fade-left",
            AosDelay = 100
        },
        new Service
        {
            IconClass = "fas fa-phone",
            Title = "contacto",
            DescriptionItems = new()
            {
                "contactoDescripcion1",
                "contactoDescripcion2"
            },
            AosAnimation = "fade-up",
            AosDelay = 100
        },
        new Service
        {
            IconClass = "fa-solid fa-kaaba",
            Title = "productosServicios",
            DescriptionItems = new()
            {
                "productosServiciosDescripcion1",
                "productosServiciosDescripcion2",
                "productosServiciosDescripcion3",
                "productosServiciosDescripcion4"
            },
            AosAnimation = "fade-right",
            AosDelay = 100
        },
    };

    protected override void OnInitialized()
    {
        Translator.OnLanguageChanged += OnLanguageChangedHandler;
    }

    private void OnLanguageChangedHandler()
    {
        InvokeAsync(StateHasChanged); // fuerza el re-render cuando cambia el idioma
    }

    public void Dispose()
    {
        Translator.OnLanguageChanged -= OnLanguageChangedHandler; // limpia suscripción
    }
}
