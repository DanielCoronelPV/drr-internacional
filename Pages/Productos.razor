@inject TranslationService Translator
@inject IJSRuntime JS

<section id="eleginos" class="why-choose-us">
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h2>@((MarkupString)Translator.Translate("productos"))</h2>
            <div class="divider"></div>
            <p>
                @((MarkupString)Translator.Translate("productosSubtitle"))
            </p>
        </div>

        <div class="container">
            <div class="products-grid">
                @foreach (var product in Products)
                {
                    <div class="product-card">
                        <div class="product-image-container">
                            <img src="@product.Image" alt="@product.Name" class="product-image" />
                            <div class="image-overlay"></div>
                            <div class="category-badge">@((MarkupString)Translator.Translate(product.Category))</div>
                        </div>
                        <div class="product-content">
                            <h3 class="product-title">@((MarkupString)Translator.Translate(product.Name))</h3>
                            <p class="product-description">@((MarkupString)Translator.Translate(product.Description))</p>
                        </div>
                    </div>
                }
            </div>

            <div class="banner-position">
                <div class="natural-products-banner">
                    <div class="dot animate"></div>
                    <span class="natural-text">@((MarkupString)Translator.Translate("productosNaturales"))</span>
                </div>
            </div>

        </div>

    </div>
</section>

@code {
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Image { get; set; } = "";
        public string Category { get; set; } = "";
    }

    public List<Product> Products = new()
    {
        new() { Id = 1, Name = "madera", Description = "maderaDescripcion", Image = "assets/img/products/madera.jpg", Category = "materiales" },
        new() { Id = 2, Name = "teymate", Description = "teymateDescripcion", Image = "assets/img/products/teyerba.jpg", Category = "bebidas" },
        new() { Id = 3, Name = "citricos", Description = "citricosDescripcion", Image = "assets/img/products/citricos.jpg", Category = "frutas" },
        new() { Id = 4, Name = "carnes", Description = "carnesDescripcion", Image = "assets/img/products/carnes.jpg", Category = "proteínas" },
        new() { Id = 5, Name = "vinos", Description = "vinosDescripcion", Image = "assets/img/products/vinos.jpg", Category = "bebidas" },
        new() { Id = 6, Name = "aceitunas", Description = "aceitunasDescripcion", Image = "assets/img/products/aceitunas.jpg", Category = "conservas" },
        new() { Id = 7, Name = "aceiteOliva", Description = "aceiteOlivaDescripcion", Image = "assets/img/products/aceite-oliva.jpg", Category = "aceites" },
        new() { Id = 8, Name = "nuecesCoco", Description = "nuecesCocoDescripcion", Image = "assets/img/products/nueces-coco.jpg", Category = "frutosSecos" },
        new() { Id = 9, Name = "otros", Description = "otrosDescripcion", Image = "assets/img/products/otros-productos.jpg", Category = "diversos" }
    };

    protected override void OnInitialized()
    {
        Translator.OnLanguageChanged += OnLanguageChangedHandler;
    }

    private void OnLanguageChangedHandler()
    {
        InvokeAsync(StateHasChanged); // fuerza el re-render cuando cambia el idioma
    }

    public void Dispose()
    {
        Translator.OnLanguageChanged -= OnLanguageChangedHandler; // limpia suscripción
    }
}
