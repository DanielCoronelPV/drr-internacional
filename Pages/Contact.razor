@using DRR_PRESENTATION.Services
@using System.Text.Json

@inject TranslationService Translator
@inject EmpresaService EmpresaService

<section class="contact-section">
        <div class="contact-header">
            <h2>@((MarkupString)Translator.Translate("contactanos"))</h2>
            <div class="divider"></div>
            <p>@((MarkupString)Translator.Translate("contactanosSubtitle"))</p>
        </div>

        <div class="contact-grid">
            <div class="map-component">
                <div id="map" class="map-placeholder"></div>

                <div class="contact-info-box">
                    <h3>@((MarkupString)Translator.Translate("informacionContacto"))</h3>
                    <div class="info-item">
                        <div class="icon-box blue"><i class="fas fa-map-pin"></i></div>
                        <div>
                            <h4>@((MarkupString)Translator.Translate("direccion"))</h4>
                            <p>@((MarkupString)Translator.Translate("direccionDescri"))</p>
                        </div>
                    </div>
                    <div class="info-item">
                        <div class="icon-box green"><i class="fas fa-phone"></i></div>
                        <div>
                            <h4>@((MarkupString)Translator.Translate("telefono"))</h4>
                            <p>+@numeroWhatsApp</p>
                        </div>
                    </div>
                    <div class="info-item">
                        <div class="icon-box purple"><i class="fas fa-envelope"></i></div>
                        <div>
                            <h4>@((MarkupString)Translator.Translate("email"))</h4>
                                    @if (empresa != null && !string.IsNullOrEmpty(empresa.E_Mail))
                            { 
                            <p>@empresa.E_Mail</p>
                            }
                        </div>
                    </div>
                    <div class="info-item">
                        <div class="icon-box orange"><i class="fas fa-clock"></i></div>
                        <div>
                            <h4>@((MarkupString)Translator.Translate("horarios"))</h4>
                            <p>@((MarkupString)Translator.Translate("horariosDescripcion1"))</p>
                            <p>@((MarkupString)Translator.Translate("horariosDescripcion2"))</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="contact-form">
                <h3>@((MarkupString)Translator.Translate("envianosMensaje"))</h3>
                <p>@((MarkupString)Translator.Translate("enviarSubtitle"))</p>
                <EditForm Model="formData" OnValidSubmit="HandleSubmit">
                    <div class="form-group">
                        <i class="fas fa-user icon-input"></i>
                        <InputText class="input" @bind-Value="formData.FullName" placeholder="@((MarkupString)Translator.Translate("nombreCompleto"))" required />
                    </div>
                    <div class="form-group">
                        <i class="fas fa-envelope icon-input"></i>
                        <InputText type="email" class="input" @bind-Value="formData.Email" placeholder="@((MarkupString)Translator.Translate("correoElectronico"))" required />
                    </div>
                    <div class="form-group">
                        <i class="fas fa-phone icon-input"></i>
                        <InputText type="tel" class="input" @bind-Value="formData.Phone" placeholder="@((MarkupString)Translator.Translate("numeroTelefono"))" required />
                    </div>
                    <div class="form-group">
                        <i class="fas fa-comment icon-input"></i>
                        <InputTextArea class="input textarea" @bind-Value="formData.Message" placeholder="@((MarkupString)Translator.Translate("tuMensaje"))" Rows="5" required />
                    </div>
                    <button type="submit" class="submit-button">
                        <i class="fas fa-paper-plane"></i> <span>@((MarkupString)Translator.Translate("enviarMensaje"))</span>
                    </button>
                </EditForm>
            </div>
        </div>
</section>

@code {
    private DRR_PRESENTATION.Models.Empresa? empresa;
    [Inject] IJSRuntime? JS { get; set; }
    private string numeroWhatsApp = "";

    private ContactFormModel formData = new();

    private async void HandleSubmit()
    {
        try
        {
            var json = JsonSerializer.Serialize(formData);
            using var doc = JsonDocument.Parse(json);
            var element = doc.RootElement;

            await JS.InvokeVoidAsync("sendEmail", element);

            formData = new();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error al enviar correo:", ex.Message);
        }
    }

    public class ContactFormModel
    {
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        // public string Reason { get; set; } = string.Empty;
        // public List<string> Modules { get; set; } = new();
        public string Message { get; set; } = string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setupFab");
            await JS.InvokeVoidAsync("initLeafletMap");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            empresa = await EmpresaService.ObtenerEmpresaAsync();

            if (empresa == null)
            {
                await JS.InvokeVoidAsync("console.log", "Datos no encontrados.");
            }
            else
            {
                // Formatear teléfono
                var telefono = empresa?.telefono ?? "";

                // Eliminar guiones y espacios
                telefono = telefono.Replace("-", "").Replace(" ", "");

                // Eliminar primer 0
                if (telefono.StartsWith("0"))
                    telefono = telefono.Substring(1);

                // Prefijo país Argentina: 549
                numeroWhatsApp = $"549{telefono}";
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error al obtener datos:", ex.Message);
        }
    }

    protected override void OnInitialized()
    {
        Translator.OnLanguageChanged += OnLanguageChangedHandler;
    }

    private void OnLanguageChangedHandler()
    {
        InvokeAsync(StateHasChanged); // fuerza el re-render cuando cambia el idioma
    }

    public void Dispose()
    {
        Translator.OnLanguageChanged -= OnLanguageChangedHandler; // limpia suscripción
    }

}
