@inject TranslationService Translator

<section class="about-section">
    <div class="container">
        <div class="text-center about-header">
            <h2>
                @((MarkupString)Translator.Translate("objetivo"))
            </h2>
            <div class="divider" data-aos="fade-up" data-aos-duration="1000"></div>
            <p>
                @((MarkupString)Translator.Translate("objetivoSubtitle"))
            </p>
        </div>

        <div class="custom-container">
            <div class="custom-grid">
                @foreach (var group in CardGroups)
                {
                    <div class="card-group">
                        @foreach (var card in group)
                        {
                            <div class="card @card.BorderClass" data-aos="@card.AosAnimation" data-aos-delay="@card.AosDelay">
                                <div class="card-content">
                                    <h3 class="card-title">@((MarkupString)Translator.Translate(card.Title))</h3>
                                    <p class="card-text">@((MarkupString)Translator.Translate(card.Text))</p>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

    </div>
</section>

@code {
    public class InfoCard
    {
        public string Title { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
        public string BorderClass { get; set; } = string.Empty;
        public string AosAnimation { get; set; } = string.Empty;
        public int AosDelay { get; set; } = 0;
    }

    public List<List<InfoCard>> CardGroups { get; set; } = new()
    {
        new List<InfoCard>
        {
            new InfoCard
            {
                Title = "nuestroEquipoTitle",
                Text = "nuestroEquipoText",
                BorderClass = "border-primary",
                AosAnimation = "fade-left",
                AosDelay = 100
            },
            new InfoCard
            {
                Title = "expansionGlobalTitle",
                Text = "expansionGlobalText",
                BorderClass = "border-accent",
                AosAnimation = "fade-left",
                AosDelay = 100
            }
        },
        new List<InfoCard>
        {
            new InfoCard
            {
                Title = "ubicacionEstrategicaTitle",
                Text = "ubicacionEstrategicaText",
                BorderClass = "border-primary-glow",
                AosAnimation = "fade-right",
                AosDelay = 100
            },
            new InfoCard
            {
                Title = "logisticaAdaptadaTitle",
                Text = "logisticaAdaptadaText",
                BorderClass = "border-accent",
                AosAnimation = "fade-right",
                AosDelay = 100
            }
        }
    };

    protected override void OnInitialized()
    {
        Translator.OnLanguageChanged += OnLanguageChangedHandler;
    }

    private void OnLanguageChangedHandler()
    {
        InvokeAsync(StateHasChanged); // fuerza el re-render cuando cambia el idioma
    }

    public void Dispose()
    {
        Translator.OnLanguageChanged -= OnLanguageChangedHandler; // limpia suscripción
    }
}